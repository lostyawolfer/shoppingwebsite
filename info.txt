отличие потоков от asyncio в том, что в asyncio приходится серьёзно переделывать код.

в потоках операционная система отвечает за скорость переключения, и последовательность переключения между потоками, а в asyncio управление происходит непосредственно с помощью языка Python.
в процессах операционная система отвечает за запуск дополнительных процессов.

мультипроцессинг - удобен, когда происходит решение задач, связанных с вычислениями (там, где постоянно задействован процессор), но если происходит обмен со внешними данными (запрос к сети, чтение/запись диска, и то что работает значительно медленнее, чем процессор), выгоднее использовать потоки.

иногда два способа (а именно threading и asyncio) называют конкурентностью, но это некорректно, так как там нет никаких задач у корутин или потоков обогнать друг друга; их корректней переводить как "квази-параллельность".



генератор - функция, которая возвращает итератор. они позволяют использовать меньше данных и меньше памяти. **генераторы создаются с помощью ключевого слова "yield"**.
приемущества генераторов:
	1. экономия памяти (они не создают всю последовательность сразу, а вычисляют по мере необходимости)
	2. удобство синтаксиса
	3. повышение производительности (они уменьшают время отклика программы при работе с большими данными)
	
